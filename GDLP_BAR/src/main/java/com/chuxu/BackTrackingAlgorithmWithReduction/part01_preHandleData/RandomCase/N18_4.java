package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N18_4 {
    public static int dimension = 18;
    public static final double[] ci =
            {687.0, 554.0, 438.0, 432.0, 758.0, 622.0, 691.0, 654.0, 652.0, 903.0, 115.0, 508.0, 723.0, 516.0, 598.0, 501.0, 801.0, 487.0};
    public static final double[] pi =
            {443.0, 449.0, 563.0, 116.0, 431.0, 512.0, 797.0, 140.0, 835.0, 380.0, 880.0, 594.0, 813.0, 464.0, 396.0, 634.0, 557.0, 773.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 190.30, 91.89, 105.77, 93.09, 193.36, 174.42, 187.22, 93.02, 164.67, 176.50, 168.73, 95.22, 138.87, 127.53, 109.17, 88.35, 128.68},
            {190.30, 0.00, 195.59, 104.42, 194.45, 159.81, 190.88, 179.52, 122.79, 166.62, 110.07, 121.63, 135.51, 190.80, 91.19, 88.42, 166.93, 93.63},
            {91.89, 195.59, 0.00, 153.86, 96.75, 80.52, 154.18, 129.29, 100.12, 193.85, 121.79, 157.00, 181.27, 111.44, 120.44, 122.09, 97.38, 139.01},
            {105.77, 104.42, 153.86, 0.00, 185.96, 107.32, 100.84, 190.12, 154.16, 138.36, 176.91, 96.87, 108.34, 128.55, 112.69, 81.59, 119.60, 141.21},
            {93.09, 194.45, 96.75, 185.96, 0.00, 137.87, 154.64, 171.16, 122.88, 138.04, 95.91, 110.25, 120.21, 155.00, 133.64, 136.64, 195.93, 96.39},
            {193.36, 159.81, 80.52, 107.32, 137.87, 0.00, 174.08, 156.49, 166.20, 158.09, 138.72, 183.41, 132.05, 178.13, 153.64, 175.58, 91.62, 149.57},
            {174.42, 190.88, 154.18, 100.84, 154.64, 174.08, 0.00, 86.19, 178.63, 178.08, 182.53, 119.12, 198.26, 149.60, 121.93, 130.87, 95.10, 143.32},
            {187.22, 179.52, 129.29, 190.12, 171.16, 156.49, 86.19, 0.00, 197.50, 133.13, 96.11, 114.37, 186.61, 102.49, 92.48, 93.82, 128.07, 113.34},
            {93.02, 122.79, 100.12, 154.16, 122.88, 166.20, 178.63, 197.50, 0.00, 103.93, 136.39, 116.23, 172.12, 131.84, 188.92, 170.25, 170.91, 101.36},
            {164.67, 166.62, 193.85, 138.36, 138.04, 158.09, 178.08, 133.13, 103.93, 0.00, 94.85, 171.69, 198.98, 102.86, 118.05, 156.86, 195.85, 87.89},
            {176.50, 110.07, 121.79, 176.91, 95.91, 138.72, 182.53, 96.11, 136.39, 94.85, 0.00, 80.68, 196.03, 158.18, 152.83, 185.66, 172.32, 144.68},
            {168.73, 121.63, 157.00, 96.87, 110.25, 183.41, 119.12, 114.37, 116.23, 171.69, 80.68, 0.00, 115.62, 112.95, 106.65, 119.75, 96.59, 122.35},
            {95.22, 135.51, 181.27, 108.34, 120.21, 132.05, 198.26, 186.61, 172.12, 198.98, 196.03, 115.62, 0.00, 182.76, 115.99, 133.80, 101.69, 147.71},
            {138.87, 190.80, 111.44, 128.55, 155.00, 178.13, 149.60, 102.49, 131.84, 102.86, 158.18, 112.95, 182.76, 0.00, 199.55, 176.83, 130.11, 178.54},
            {127.53, 91.19, 120.44, 112.69, 133.64, 153.64, 121.93, 92.48, 188.92, 118.05, 152.83, 106.65, 115.99, 199.55, 0.00, 169.34, 109.58, 140.05},
            {109.17, 88.42, 122.09, 81.59, 136.64, 175.58, 130.87, 93.82, 170.25, 156.86, 185.66, 119.75, 133.80, 176.83, 169.34, 0.00, 134.30, 92.46},
            {88.35, 166.93, 97.38, 119.60, 195.93, 91.62, 95.10, 128.07, 170.91, 195.85, 172.32, 96.59, 101.69, 130.11, 109.58, 134.30, 0.00, 193.77},
            {128.68, 93.63, 139.01, 141.21, 96.39, 149.57, 143.32, 113.34, 101.36, 87.89, 144.68, 122.35, 147.71, 178.54, 140.05, 92.46, 193.77, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
