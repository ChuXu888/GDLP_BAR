package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N18_2 {
    public static int dimension = 18;
    public static final double[] ci =
            {226.0, 314.0, 370.0, 455.0, 942.0, 783.0, 601.0, 658.0, 696.0, 190.0, 715.0, 833.0, 134.0, 701.0, 912.0, 143.0, 289.0, 950.0};
    public static final double[] pi =
            {819.0, 737.0, 876.0, 361.0, 837.0, 592.0, 448.0, 643.0, 463.0, 260.0, 610.0, 707.0, 564.0, 604.0, 952.0, 640.0, 541.0, 113.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 90.43, 108.90, 161.00, 196.30, 85.90, 119.35, 96.16, 161.92, 121.87, 110.46, 171.46, 130.22, 181.58, 182.94, 136.48, 181.13, 169.33},
            {90.43, 0.00, 192.97, 161.91, 138.31, 133.98, 182.20, 191.65, 197.47, 118.37, 107.98, 129.34, 101.89, 177.17, 180.14, 173.27, 125.35, 97.02},
            {108.90, 192.97, 0.00, 104.15, 116.82, 142.81, 197.80, 87.60, 168.73, 193.57, 173.15, 108.39, 138.00, 169.35, 120.44, 187.30, 152.98, 151.81},
            {161.00, 161.91, 104.15, 0.00, 197.15, 96.70, 82.18, 158.90, 80.60, 189.05, 136.64, 159.16, 161.81, 125.11, 159.08, 135.64, 171.93, 101.54},
            {196.30, 138.31, 116.82, 197.15, 0.00, 124.85, 167.90, 161.08, 81.12, 192.73, 151.12, 184.43, 116.11, 130.86, 165.30, 139.41, 86.29, 183.43},
            {85.90, 133.98, 142.81, 96.70, 124.85, 0.00, 125.59, 140.36, 88.18, 158.78, 186.55, 133.41, 110.26, 147.25, 158.24, 184.56, 191.55, 99.59},
            {119.35, 182.20, 197.80, 82.18, 167.90, 125.59, 0.00, 121.76, 177.53, 146.78, 152.12, 144.16, 95.95, 151.27, 114.61, 89.92, 155.50, 172.22},
            {96.16, 191.65, 87.60, 158.90, 161.08, 140.36, 121.76, 0.00, 179.80, 86.11, 156.84, 130.34, 190.77, 142.92, 149.22, 96.90, 192.92, 118.96},
            {161.92, 197.47, 168.73, 80.60, 81.12, 88.18, 177.53, 179.80, 0.00, 106.84, 135.90, 101.79, 132.44, 186.90, 189.94, 96.38, 134.86, 138.06},
            {121.87, 118.37, 193.57, 189.05, 192.73, 158.78, 146.78, 86.11, 106.84, 0.00, 120.25, 199.48, 122.86, 122.00, 87.86, 152.19, 127.03, 118.36},
            {110.46, 107.98, 173.15, 136.64, 151.12, 186.55, 152.12, 156.84, 135.90, 120.25, 0.00, 102.21, 129.54, 82.96, 164.87, 167.53, 157.12, 120.25},
            {171.46, 129.34, 108.39, 159.16, 184.43, 133.41, 144.16, 130.34, 101.79, 199.48, 102.21, 0.00, 99.26, 144.26, 155.82, 139.61, 98.75, 93.96},
            {130.22, 101.89, 138.00, 161.81, 116.11, 110.26, 95.95, 190.77, 132.44, 122.86, 129.54, 99.26, 0.00, 162.30, 145.83, 155.38, 171.07, 87.53},
            {181.58, 177.17, 169.35, 125.11, 130.86, 147.25, 151.27, 142.92, 186.90, 122.00, 82.96, 144.26, 162.30, 0.00, 186.16, 161.75, 183.27, 143.92},
            {182.94, 180.14, 120.44, 159.08, 165.30, 158.24, 114.61, 149.22, 189.94, 87.86, 164.87, 155.82, 145.83, 186.16, 0.00, 149.27, 152.01, 124.61},
            {136.48, 173.27, 187.30, 135.64, 139.41, 184.56, 89.92, 96.90, 96.38, 152.19, 167.53, 139.61, 155.38, 161.75, 149.27, 0.00, 193.35, 188.73},
            {181.13, 125.35, 152.98, 171.93, 86.29, 191.55, 155.50, 192.92, 134.86, 127.03, 157.12, 98.75, 171.07, 183.27, 152.01, 193.35, 0.00, 126.68},
            {169.33, 97.02, 151.81, 101.54, 183.43, 99.59, 172.22, 118.96, 138.06, 118.36, 120.25, 93.96, 87.53, 143.92, 124.61, 188.73, 126.68, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
