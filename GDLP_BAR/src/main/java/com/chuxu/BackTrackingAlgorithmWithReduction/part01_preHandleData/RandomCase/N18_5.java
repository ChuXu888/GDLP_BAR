package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N18_5 {
    public static int dimension = 18;
    public static final double[] ci =
            {908.0, 207.0, 913.0, 352.0, 704.0, 649.0, 149.0, 829.0, 442.0, 405.0, 738.0, 661.0, 780.0, 420.0, 132.0, 451.0, 349.0, 549.0};
    public static final double[] pi =
            {887.0, 620.0, 828.0, 684.0, 115.0, 935.0, 176.0, 177.0, 600.0, 898.0, 173.0, 928.0, 254.0, 865.0, 798.0, 981.0, 711.0, 210.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 99.33, 112.94, 102.80, 163.13, 152.03, 197.27, 165.67, 175.81, 121.98, 151.94, 158.68, 84.20, 180.56, 164.55, 106.41, 84.20, 97.91},
            {99.33, 0.00, 93.65, 132.42, 103.40, 191.41, 153.16, 157.25, 107.34, 160.16, 92.56, 148.00, 179.41, 174.82, 149.68, 88.36, 124.98, 164.46},
            {112.94, 93.65, 0.00, 91.62, 131.71, 106.59, 87.71, 162.58, 147.68, 176.67, 174.90, 84.00, 193.77, 137.95, 81.28, 122.62, 98.86, 168.93},
            {102.80, 132.42, 91.62, 0.00, 198.29, 96.70, 174.28, 102.89, 110.60, 187.93, 110.67, 143.70, 161.27, 129.01, 135.29, 140.23, 175.36, 141.56},
            {163.13, 103.40, 131.71, 198.29, 0.00, 134.58, 163.54, 194.57, 188.76, 130.54, 196.94, 191.08, 199.69, 197.22, 99.03, 118.37, 119.33, 134.84},
            {152.03, 191.41, 106.59, 96.70, 134.58, 0.00, 153.10, 199.84, 178.22, 104.47, 113.88, 173.28, 140.41, 84.55, 183.48, 99.90, 115.89, 83.85},
            {197.27, 153.16, 87.71, 174.28, 163.54, 153.10, 0.00, 153.15, 150.92, 175.49, 131.05, 156.31, 143.40, 81.86, 81.99, 130.14, 108.46, 148.96},
            {165.67, 157.25, 162.58, 102.89, 194.57, 199.84, 153.15, 0.00, 158.87, 139.63, 121.27, 165.68, 143.82, 137.30, 121.28, 105.92, 170.18, 155.69},
            {175.81, 107.34, 147.68, 110.60, 188.76, 178.22, 150.92, 158.87, 0.00, 104.69, 117.60, 130.30, 156.81, 157.99, 117.58, 167.35, 113.97, 122.21},
            {121.98, 160.16, 176.67, 187.93, 130.54, 104.47, 175.49, 139.63, 104.69, 0.00, 177.27, 181.28, 96.07, 111.99, 85.22, 115.41, 163.09, 141.84},
            {151.94, 92.56, 174.90, 110.67, 196.94, 113.88, 131.05, 121.27, 117.60, 177.27, 0.00, 98.78, 120.39, 163.74, 173.87, 185.72, 115.92, 172.32},
            {158.68, 148.00, 84.00, 143.70, 191.08, 173.28, 156.31, 165.68, 130.30, 181.28, 98.78, 0.00, 197.24, 129.92, 108.43, 191.74, 198.74, 91.64},
            {84.20, 179.41, 193.77, 161.27, 199.69, 140.41, 143.40, 143.82, 156.81, 96.07, 120.39, 197.24, 0.00, 114.16, 82.96, 167.38, 173.73, 82.25},
            {180.56, 174.82, 137.95, 129.01, 197.22, 84.55, 81.86, 137.30, 157.99, 111.99, 163.74, 129.92, 114.16, 0.00, 138.71, 112.89, 168.71, 171.31},
            {164.55, 149.68, 81.28, 135.29, 99.03, 183.48, 81.99, 121.28, 117.58, 85.22, 173.87, 108.43, 82.96, 138.71, 0.00, 140.18, 188.62, 110.28},
            {106.41, 88.36, 122.62, 140.23, 118.37, 99.90, 130.14, 105.92, 167.35, 115.41, 185.72, 191.74, 167.38, 112.89, 140.18, 0.00, 105.62, 80.30},
            {84.20, 124.98, 98.86, 175.36, 119.33, 115.89, 108.46, 170.18, 113.97, 163.09, 115.92, 198.74, 173.73, 168.71, 188.62, 105.62, 0.00, 193.81},
            {97.91, 164.46, 168.93, 141.56, 134.84, 83.85, 148.96, 155.69, 122.21, 141.84, 172.32, 91.64, 82.25, 171.31, 110.28, 80.30, 193.81, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
