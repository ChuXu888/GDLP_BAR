package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N18_1 {
    public static int dimension = 18;
    public static final double[] ci =
            {820.0, 810.0, 353.0, 917.0, 124.0, 588.0, 473.0, 742.0, 522.0, 403.0, 665.0, 442.0, 666.0, 242.0, 321.0, 516.0, 198.0, 145.0};
    public static final double[] pi =
            {120.0, 113.0, 930.0, 945.0, 459.0, 869.0, 221.0, 286.0, 494.0, 168.0, 883.0, 334.0, 743.0, 795.0, 423.0, 932.0, 352.0, 202.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 83.31, 198.20, 111.58, 125.55, 166.48, 109.03, 189.02, 86.12, 141.30, 177.15, 91.16, 122.78, 106.12, 117.62, 116.64, 197.56, 93.37},
            {83.31, 0.00, 191.56, 120.62, 193.43, 142.87, 162.65, 150.51, 89.73, 193.02, 102.30, 174.87, 190.61, 151.99, 160.50, 191.30, 169.64, 87.34},
            {198.20, 191.56, 0.00, 117.88, 167.76, 99.38, 142.52, 116.91, 113.38, 183.84, 152.60, 116.12, 130.83, 84.73, 109.31, 161.11, 131.64, 88.95},
            {111.58, 120.62, 117.88, 0.00, 176.72, 199.56, 199.23, 105.47, 84.00, 85.04, 81.27, 83.50, 140.63, 174.95, 183.91, 152.24, 112.02, 173.33},
            {125.55, 193.43, 167.76, 176.72, 0.00, 164.72, 153.94, 199.91, 117.43, 99.47, 157.29, 151.92, 99.30, 110.12, 117.83, 118.66, 129.87, 166.65},
            {166.48, 142.87, 99.38, 199.56, 164.72, 0.00, 94.29, 164.19, 132.62, 195.32, 97.21, 117.28, 197.64, 158.93, 95.96, 85.84, 173.98, 181.73},
            {109.03, 162.65, 142.52, 199.23, 153.94, 94.29, 0.00, 184.99, 85.73, 109.56, 152.28, 87.59, 137.91, 82.34, 152.28, 137.57, 144.23, 165.32},
            {189.02, 150.51, 116.91, 105.47, 199.91, 164.19, 184.99, 0.00, 87.32, 144.34, 142.19, 110.11, 197.69, 196.32, 162.90, 179.81, 143.21, 170.31},
            {86.12, 89.73, 113.38, 84.00, 117.43, 132.62, 85.73, 87.32, 0.00, 154.22, 171.85, 125.18, 91.28, 82.18, 85.00, 112.31, 167.45, 189.12},
            {141.30, 193.02, 183.84, 85.04, 99.47, 195.32, 109.56, 144.34, 154.22, 0.00, 181.88, 153.94, 149.68, 145.75, 179.69, 195.01, 112.08, 86.95},
            {177.15, 102.30, 152.60, 81.27, 157.29, 97.21, 152.28, 142.19, 171.85, 181.88, 0.00, 126.29, 111.56, 182.52, 187.56, 187.65, 143.78, 167.16},
            {91.16, 174.87, 116.12, 83.50, 151.92, 117.28, 87.59, 110.11, 125.18, 153.94, 126.29, 0.00, 114.41, 124.82, 195.61, 132.05, 144.85, 154.60},
            {122.78, 190.61, 130.83, 140.63, 99.30, 197.64, 137.91, 197.69, 91.28, 149.68, 111.56, 114.41, 0.00, 195.82, 188.25, 169.55, 168.08, 154.59},
            {106.12, 151.99, 84.73, 174.95, 110.12, 158.93, 82.34, 196.32, 82.18, 145.75, 182.52, 124.82, 195.82, 0.00, 133.10, 158.73, 124.53, 183.41},
            {117.62, 160.50, 109.31, 183.91, 117.83, 95.96, 152.28, 162.90, 85.00, 179.69, 187.56, 195.61, 188.25, 133.10, 0.00, 151.02, 166.20, 85.61},
            {116.64, 191.30, 161.11, 152.24, 118.66, 85.84, 137.57, 179.81, 112.31, 195.01, 187.65, 132.05, 169.55, 158.73, 151.02, 0.00, 132.50, 191.33},
            {197.56, 169.64, 131.64, 112.02, 129.87, 173.98, 144.23, 143.21, 167.45, 112.08, 143.78, 144.85, 168.08, 124.53, 166.20, 132.50, 0.00, 94.17},
            {93.37, 87.34, 88.95, 173.33, 166.65, 181.73, 165.32, 170.31, 189.12, 86.95, 167.16, 154.60, 154.59, 183.41, 85.61, 191.33, 94.17, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
