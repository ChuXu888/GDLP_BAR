package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N15_5 {
    public static int dimension = 15;
    public static final double[] ci =
            {974.0, 555.0, 312.0, 340.0, 329.0, 918.0, 452.0, 908.0, 875.0, 652.0, 387.0, 732.0, 598.0, 721.0, 981.0};
    public static final double[] pi =
            {823.0, 847.0, 477.0, 762.0, 289.0, 459.0, 497.0, 203.0, 385.0, 783.0, 296.0, 406.0, 647.0, 595.0, 512.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 98.00, 164.85, 87.72, 92.47, 128.47, 194.46, 166.45, 132.73, 87.36, 84.93, 100.40, 92.61, 149.03, 192.25},
            {98.00, 0.00, 121.05, 199.59, 182.93, 150.06, 198.36, 124.45, 185.51, 133.56, 120.40, 118.58, 175.20, 114.54, 104.19},
            {164.85, 121.05, 0.00, 86.50, 139.18, 153.25, 98.80, 131.55, 108.46, 178.53, 171.68, 95.08, 80.19, 136.48, 173.07},
            {87.72, 199.59, 86.50, 0.00, 155.71, 141.50, 161.09, 91.00, 104.75, 138.89, 96.90, 180.77, 187.74, 140.48, 84.15},
            {92.47, 182.93, 139.18, 155.71, 0.00, 117.90, 158.93, 195.05, 121.03, 162.22, 157.21, 103.13, 105.61, 113.89, 176.11},
            {128.47, 150.06, 153.25, 141.50, 117.90, 0.00, 119.28, 111.86, 87.85, 189.58, 143.44, 169.18, 113.85, 127.28, 150.89},
            {194.46, 198.36, 98.80, 161.09, 158.93, 119.28, 0.00, 194.62, 162.82, 109.28, 116.24, 129.29, 167.95, 169.83, 186.40},
            {166.45, 124.45, 131.55, 91.00, 195.05, 111.86, 194.62, 0.00, 157.70, 190.41, 163.40, 190.64, 178.78, 114.51, 93.61},
            {132.73, 185.51, 108.46, 104.75, 121.03, 87.85, 162.82, 157.70, 0.00, 142.82, 171.68, 106.10, 176.46, 111.77, 117.50},
            {87.36, 133.56, 178.53, 138.89, 162.22, 189.58, 109.28, 190.41, 142.82, 0.00, 90.67, 104.48, 110.07, 139.43, 103.88},
            {84.93, 120.40, 171.68, 96.90, 157.21, 143.44, 116.24, 163.40, 171.68, 90.67, 0.00, 136.57, 199.93, 109.69, 97.35},
            {100.40, 118.58, 95.08, 180.77, 103.13, 169.18, 129.29, 190.64, 106.10, 104.48, 136.57, 0.00, 80.82, 116.70, 100.30},
            {92.61, 175.20, 80.19, 187.74, 105.61, 113.85, 167.95, 178.78, 176.46, 110.07, 199.93, 80.82, 0.00, 126.61, 83.71},
            {149.03, 114.54, 136.48, 140.48, 113.89, 127.28, 169.83, 114.51, 111.77, 139.43, 109.69, 116.70, 126.61, 0.00, 86.40},
            {192.25, 104.19, 173.07, 84.15, 176.11, 150.89, 186.40, 93.61, 117.50, 103.88, 97.35, 100.30, 83.71, 86.40, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
