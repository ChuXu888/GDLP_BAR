package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N24_1 {
    public static int dimension = 24;
    public static final double[] ci =
            {575.0, 572.0, 134.0, 929.0, 908.0, 508.0, 187.0, 309.0, 400.0, 699.0, 508.0, 439.0, 974.0, 681.0, 338.0, 510.0, 795.0, 111.0, 262.0, 910.0, 801.0, 988.0, 403.0, 327.0};
    public static final double[] pi =
            {249.0, 889.0, 831.0, 418.0, 237.0, 361.0, 254.0, 121.0, 802.0, 170.0, 744.0, 678.0, 840.0, 598.0, 111.0, 108.0, 942.0, 643.0, 338.0, 182.0, 713.0, 875.0, 558.0, 625.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 165.10, 188.18, 114.25, 159.91, 199.15, 192.03, 109.32, 153.70, 180.22, 184.31, 126.91, 117.43, 194.97, 172.81, 101.84, 179.85, 177.41, 125.65, 87.70, 180.57, 110.10, 94.89, 187.93},
            {165.10, 0.00, 84.94, 168.61, 110.91, 143.50, 197.25, 194.30, 160.24, 84.31, 174.44, 183.03, 114.56, 106.05, 124.39, 113.88, 117.06, 82.18, 138.04, 171.92, 174.63, 103.03, 93.98, 83.10},
            {188.18, 84.94, 0.00, 150.48, 109.59, 167.00, 156.93, 81.51, 179.03, 168.69, 163.74, 198.32, 82.25, 88.78, 198.88, 83.18, 170.92, 109.95, 84.66, 182.15, 121.85, 96.80, 153.60, 192.37},
            {114.25, 168.61, 150.48, 0.00, 131.50, 111.46, 163.11, 194.36, 91.18, 83.49, 171.49, 151.02, 165.92, 121.23, 99.31, 191.50, 85.37, 134.43, 167.69, 97.64, 134.94, 84.83, 126.33, 94.42},
            {159.91, 110.91, 109.59, 131.50, 0.00, 188.24, 91.64, 119.47, 92.95, 189.27, 113.20, 146.62, 145.83, 113.19, 83.99, 197.50, 169.33, 129.30, 87.69, 197.28, 85.49, 97.80, 112.67, 127.88},
            {199.15, 143.50, 167.00, 111.46, 188.24, 0.00, 199.47, 174.29, 165.35, 95.50, 173.67, 131.21, 169.62, 91.52, 109.75, 115.37, 197.62, 106.03, 163.37, 143.73, 117.09, 97.59, 153.82, 96.51},
            {192.03, 197.25, 156.93, 163.11, 91.64, 199.47, 0.00, 185.18, 182.38, 151.59, 97.76, 146.08, 197.91, 151.83, 177.63, 81.97, 163.44, 190.35, 149.19, 141.73, 98.74, 110.75, 184.22, 171.48},
            {109.32, 194.30, 81.51, 194.36, 119.47, 174.29, 185.18, 0.00, 97.26, 127.77, 118.69, 153.67, 116.97, 111.33, 177.50, 148.14, 133.73, 99.68, 181.89, 119.21, 177.19, 137.04, 109.48, 106.76},
            {153.70, 160.24, 179.03, 91.18, 92.95, 165.35, 182.38, 97.26, 0.00, 177.79, 82.36, 157.85, 137.37, 176.54, 190.64, 137.11, 193.18, 125.03, 186.70, 84.90, 101.72, 153.92, 113.66, 99.63},
            {180.22, 84.31, 168.69, 83.49, 189.27, 95.50, 151.59, 127.77, 177.79, 0.00, 138.84, 91.27, 164.44, 123.13, 170.09, 170.41, 114.38, 173.57, 172.48, 197.88, 106.73, 132.82, 98.90, 197.44},
            {184.31, 174.44, 163.74, 171.49, 113.20, 173.67, 97.76, 118.69, 82.36, 138.84, 0.00, 159.75, 189.28, 151.75, 104.65, 145.76, 147.86, 180.30, 99.67, 136.69, 163.64, 147.80, 191.71, 119.65},
            {126.91, 183.03, 198.32, 151.02, 146.62, 131.21, 146.08, 153.67, 157.85, 91.27, 159.75, 0.00, 113.53, 190.00, 189.08, 198.25, 192.70, 105.80, 82.51, 191.24, 167.79, 103.71, 97.06, 140.19},
            {117.43, 114.56, 82.25, 165.92, 145.83, 169.62, 197.91, 116.97, 137.37, 164.44, 189.28, 113.53, 0.00, 158.90, 194.39, 189.28, 81.22, 135.30, 130.26, 101.35, 163.24, 96.76, 126.90, 112.97},
            {194.97, 106.05, 88.78, 121.23, 113.19, 91.52, 151.83, 111.33, 176.54, 123.13, 151.75, 190.00, 158.90, 0.00, 126.06, 173.44, 159.30, 194.25, 126.77, 171.42, 87.49, 119.12, 81.13, 99.44},
            {172.81, 124.39, 198.88, 99.31, 83.99, 109.75, 177.63, 177.50, 190.64, 170.09, 104.65, 189.08, 194.39, 126.06, 0.00, 191.53, 129.20, 189.08, 94.28, 165.05, 181.61, 139.63, 118.00, 109.51},
            {101.84, 113.88, 83.18, 191.50, 197.50, 115.37, 81.97, 148.14, 137.11, 170.41, 145.76, 198.25, 189.28, 173.44, 191.53, 0.00, 112.09, 120.01, 109.81, 147.88, 115.88, 147.70, 178.42, 177.00},
            {179.85, 117.06, 170.92, 85.37, 169.33, 197.62, 163.44, 133.73, 193.18, 114.38, 147.86, 192.70, 81.22, 159.30, 129.20, 112.09, 0.00, 154.28, 121.16, 197.89, 122.10, 153.33, 106.15, 140.65},
            {177.41, 82.18, 109.95, 134.43, 129.30, 106.03, 190.35, 99.68, 125.03, 173.57, 180.30, 105.80, 135.30, 194.25, 189.08, 120.01, 154.28, 0.00, 84.66, 93.89, 139.32, 165.84, 186.76, 138.72},
            {125.65, 138.04, 84.66, 167.69, 87.69, 163.37, 149.19, 181.89, 186.70, 172.48, 99.67, 82.51, 130.26, 126.77, 94.28, 109.81, 121.16, 84.66, 0.00, 159.40, 199.39, 150.31, 162.17, 88.47},
            {87.70, 171.92, 182.15, 97.64, 197.28, 143.73, 141.73, 119.21, 84.90, 197.88, 136.69, 191.24, 101.35, 171.42, 165.05, 147.88, 197.89, 93.89, 159.40, 0.00, 94.33, 148.68, 122.18, 101.96},
            {180.57, 174.63, 121.85, 134.94, 85.49, 117.09, 98.74, 177.19, 101.72, 106.73, 163.64, 167.79, 163.24, 87.49, 181.61, 115.88, 122.10, 139.32, 199.39, 94.33, 0.00, 85.38, 151.55, 81.61},
            {110.10, 103.03, 96.80, 84.83, 97.80, 97.59, 110.75, 137.04, 153.92, 132.82, 147.80, 103.71, 96.76, 119.12, 139.63, 147.70, 153.33, 165.84, 150.31, 148.68, 85.38, 0.00, 185.87, 151.48},
            {94.89, 93.98, 153.60, 126.33, 112.67, 153.82, 184.22, 109.48, 113.66, 98.90, 191.71, 97.06, 126.90, 81.13, 118.00, 178.42, 106.15, 186.76, 162.17, 122.18, 151.55, 185.87, 0.00, 89.83},
            {187.93, 83.10, 192.37, 94.42, 127.88, 96.51, 171.48, 106.76, 99.63, 197.44, 119.65, 140.19, 112.97, 99.44, 109.51, 177.00, 140.65, 138.72, 88.47, 101.96, 81.61, 151.48, 89.83, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
