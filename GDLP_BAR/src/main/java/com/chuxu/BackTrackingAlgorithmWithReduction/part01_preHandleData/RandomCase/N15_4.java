package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N15_4 {
    public static int dimension = 15;
    public static final double[] ci =
            {106.0, 165.0, 891.0, 648.0, 794.0, 789.0, 924.0, 702.0, 625.0, 600.0, 220.0, 853.0, 518.0, 887.0, 968.0};
    public static final double[] pi =
            {495.0, 189.0, 301.0, 675.0, 246.0, 223.0, 833.0, 574.0, 461.0, 700.0, 532.0, 491.0, 663.0, 939.0, 673.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 149.29, 178.92, 154.30, 168.12, 141.92, 127.12, 148.27, 82.79, 165.94, 194.54, 99.18, 93.80, 159.21, 146.36},
            {149.29, 0.00, 152.80, 163.89, 165.99, 131.17, 98.16, 102.83, 195.61, 195.39, 116.06, 143.45, 137.94, 124.18, 130.23},
            {178.92, 152.80, 0.00, 132.45, 126.82, 114.24, 177.04, 93.35, 130.65, 103.82, 169.38, 125.75, 110.54, 108.83, 143.32},
            {154.30, 163.89, 132.45, 0.00, 195.31, 181.54, 161.12, 143.60, 143.37, 81.39, 96.23, 124.02, 82.69, 93.78, 132.57},
            {168.12, 165.99, 126.82, 195.31, 0.00, 174.18, 167.58, 109.52, 162.61, 151.45, 132.49, 139.16, 99.00, 199.55, 101.55},
            {141.92, 131.17, 114.24, 181.54, 174.18, 0.00, 194.40, 124.45, 190.71, 185.32, 193.31, 164.22, 157.84, 137.01, 135.68},
            {127.12, 98.16, 177.04, 161.12, 167.58, 194.40, 0.00, 173.44, 166.35, 81.34, 120.06, 188.82, 132.48, 133.05, 152.71},
            {148.27, 102.83, 93.35, 143.60, 109.52, 124.45, 173.44, 0.00, 175.55, 145.37, 190.24, 171.60, 184.60, 134.96, 159.22},
            {82.79, 195.61, 130.65, 143.37, 162.61, 190.71, 166.35, 175.55, 0.00, 194.55, 144.73, 125.81, 143.14, 81.24, 185.18},
            {165.94, 195.39, 103.82, 81.39, 151.45, 185.32, 81.34, 145.37, 194.55, 0.00, 188.99, 185.72, 112.11, 121.75, 110.06},
            {194.54, 116.06, 169.38, 96.23, 132.49, 193.31, 120.06, 190.24, 144.73, 188.99, 0.00, 124.38, 115.36, 118.15, 90.32},
            {99.18, 143.45, 125.75, 124.02, 139.16, 164.22, 188.82, 171.60, 125.81, 185.72, 124.38, 0.00, 173.79, 134.15, 118.56},
            {93.80, 137.94, 110.54, 82.69, 99.00, 157.84, 132.48, 184.60, 143.14, 112.11, 115.36, 173.79, 0.00, 92.22, 111.19},
            {159.21, 124.18, 108.83, 93.78, 199.55, 137.01, 133.05, 134.96, 81.24, 121.75, 118.15, 134.15, 92.22, 0.00, 181.43},
            {146.36, 130.23, 143.32, 132.57, 101.55, 135.68, 152.71, 159.22, 185.18, 110.06, 90.32, 118.56, 111.19, 181.43, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
