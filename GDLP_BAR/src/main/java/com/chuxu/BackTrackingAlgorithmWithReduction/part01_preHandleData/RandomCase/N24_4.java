package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N24_4 {
    public static int dimension = 24;
    public static final double[] ci =
            {859.0, 603.0, 386.0, 953.0, 191.0, 914.0, 862.0, 275.0, 111.0, 539.0, 471.0, 763.0, 824.0, 864.0, 232.0, 152.0, 982.0, 465.0, 593.0, 273.0, 465.0, 332.0, 404.0, 672.0};
    public static final double[] pi =
            {757.0, 810.0, 145.0, 706.0, 145.0, 422.0, 357.0, 751.0, 984.0, 145.0, 372.0, 361.0, 888.0, 951.0, 512.0, 387.0, 141.0, 223.0, 626.0, 428.0, 476.0, 742.0, 101.0, 119.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 85.68, 93.61, 151.94, 92.60, 95.93, 85.04, 199.45, 112.83, 128.20, 139.59, 197.17, 87.28, 100.33, 198.70, 186.44, 177.71, 96.31, 89.86, 116.01, 165.70, 183.44, 156.36, 99.77},
            {85.68, 0.00, 131.69, 192.90, 146.68, 119.21, 162.63, 136.14, 120.28, 128.02, 116.76, 197.50, 126.14, 115.50, 120.99, 124.78, 174.37, 118.81, 146.57, 134.51, 188.19, 161.19, 143.21, 157.46},
            {93.61, 131.69, 0.00, 194.72, 113.66, 129.21, 92.96, 147.92, 132.67, 137.54, 196.32, 195.43, 134.07, 122.63, 154.39, 143.50, 125.86, 82.11, 87.72, 100.15, 138.02, 140.65, 95.63, 186.49},
            {151.94, 192.90, 194.72, 0.00, 117.02, 139.73, 191.83, 199.88, 136.06, 177.37, 123.19, 109.66, 88.93, 106.50, 143.46, 107.35, 126.20, 188.08, 85.95, 138.10, 176.86, 107.06, 165.86, 168.58},
            {92.60, 146.68, 113.66, 117.02, 0.00, 136.93, 154.67, 162.97, 178.88, 178.38, 159.56, 149.15, 82.07, 97.48, 153.42, 173.00, 154.82, 81.35, 103.26, 135.09, 186.03, 124.50, 133.09, 82.47},
            {95.93, 119.21, 129.21, 139.73, 136.93, 0.00, 137.81, 174.24, 91.70, 120.02, 104.12, 164.63, 101.48, 118.74, 147.16, 173.03, 84.55, 117.56, 150.30, 121.75, 128.24, 125.22, 108.46, 188.87},
            {85.04, 162.63, 92.96, 191.83, 154.67, 137.81, 0.00, 160.89, 132.83, 123.07, 188.64, 81.96, 105.14, 138.39, 150.79, 147.14, 89.98, 109.68, 171.78, 129.55, 90.69, 150.93, 87.62, 82.33},
            {199.45, 136.14, 147.92, 199.88, 162.97, 174.24, 160.89, 0.00, 144.62, 150.80, 108.93, 175.79, 144.24, 90.56, 103.32, 193.98, 162.96, 86.00, 188.31, 171.12, 128.36, 87.75, 110.05, 167.26},
            {112.83, 120.28, 132.67, 136.06, 178.88, 91.70, 132.83, 144.62, 0.00, 179.38, 90.66, 169.02, 125.59, 111.31, 102.30, 133.04, 160.67, 194.14, 164.67, 91.52, 136.87, 144.83, 90.05, 111.60},
            {128.20, 128.02, 137.54, 177.37, 178.38, 120.02, 123.07, 150.80, 179.38, 0.00, 170.99, 102.81, 103.41, 137.69, 170.46, 100.83, 198.25, 190.47, 140.63, 99.45, 191.51, 169.49, 199.86, 163.79},
            {139.59, 116.76, 196.32, 123.19, 159.56, 104.12, 188.64, 108.93, 90.66, 170.99, 0.00, 165.35, 125.66, 110.22, 124.89, 129.85, 105.58, 144.87, 85.54, 130.29, 179.11, 109.50, 82.17, 96.22},
            {197.17, 197.50, 195.43, 109.66, 149.15, 164.63, 81.96, 175.79, 169.02, 102.81, 165.35, 0.00, 165.01, 155.84, 139.10, 167.16, 146.23, 109.47, 170.55, 190.20, 157.28, 141.89, 138.42, 90.41},
            {87.28, 126.14, 134.07, 88.93, 82.07, 101.48, 105.14, 144.24, 125.59, 103.41, 125.66, 165.01, 0.00, 150.75, 148.70, 120.08, 182.61, 147.93, 111.08, 120.66, 146.21, 150.90, 176.84, 98.24},
            {100.33, 115.50, 122.63, 106.50, 97.48, 118.74, 138.39, 90.56, 111.31, 137.69, 110.22, 155.84, 150.75, 0.00, 80.14, 178.89, 160.51, 197.66, 115.39, 171.27, 148.28, 90.50, 125.51, 112.91},
            {198.70, 120.99, 154.39, 143.46, 153.42, 147.16, 150.79, 103.32, 102.30, 170.46, 124.89, 139.10, 148.70, 80.14, 0.00, 184.29, 113.46, 143.47, 184.47, 88.90, 106.48, 83.66, 101.04, 117.31},
            {186.44, 124.78, 143.50, 107.35, 173.00, 173.03, 147.14, 193.98, 133.04, 100.83, 129.85, 167.16, 120.08, 178.89, 184.29, 0.00, 154.54, 163.14, 156.91, 128.92, 113.36, 94.47, 162.71, 122.90},
            {177.71, 174.37, 125.86, 126.20, 154.82, 84.55, 89.98, 162.96, 160.67, 198.25, 105.58, 146.23, 182.61, 160.51, 113.46, 154.54, 0.00, 169.41, 84.85, 82.86, 164.83, 188.41, 122.50, 157.34},
            {96.31, 118.81, 82.11, 188.08, 81.35, 117.56, 109.68, 86.00, 194.14, 190.47, 144.87, 109.47, 147.93, 197.66, 143.47, 163.14, 169.41, 0.00, 162.22, 84.38, 80.75, 100.98, 163.23, 92.18},
            {89.86, 146.57, 87.72, 85.95, 103.26, 150.30, 171.78, 188.31, 164.67, 140.63, 85.54, 170.55, 111.08, 115.39, 184.47, 156.91, 84.85, 162.22, 0.00, 104.10, 136.89, 93.45, 172.22, 197.64},
            {116.01, 134.51, 100.15, 138.10, 135.09, 121.75, 129.55, 171.12, 91.52, 99.45, 130.29, 190.20, 120.66, 171.27, 88.90, 128.92, 82.86, 84.38, 104.10, 0.00, 97.64, 109.82, 134.25, 162.48},
            {165.70, 188.19, 138.02, 176.86, 186.03, 128.24, 90.69, 128.36, 136.87, 191.51, 179.11, 157.28, 146.21, 148.28, 106.48, 113.36, 164.83, 80.75, 136.89, 97.64, 0.00, 138.42, 158.63, 80.34},
            {183.44, 161.19, 140.65, 107.06, 124.50, 125.22, 150.93, 87.75, 144.83, 169.49, 109.50, 141.89, 150.90, 90.50, 83.66, 94.47, 188.41, 100.98, 93.45, 109.82, 138.42, 0.00, 124.30, 151.10},
            {156.36, 143.21, 95.63, 165.86, 133.09, 108.46, 87.62, 110.05, 90.05, 199.86, 82.17, 138.42, 176.84, 125.51, 101.04, 162.71, 122.50, 163.23, 172.22, 134.25, 158.63, 124.30, 0.00, 196.18},
            {99.77, 157.46, 186.49, 168.58, 82.47, 188.87, 82.33, 167.26, 111.60, 163.79, 96.22, 90.41, 98.24, 112.91, 117.31, 122.90, 157.34, 92.18, 197.64, 162.48, 80.34, 151.10, 196.18, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
