package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N28_1 {
    public static int dimension = 28;
    public static final double[] ci =
            {963.0, 234.0, 195.0, 752.0, 484.0, 643.0, 124.0, 872.0, 237.0, 664.0, 122.0, 778.0, 802.0, 119.0, 881.0, 569.0, 982.0, 973.0, 448.0, 603.0, 360.0, 577.0, 505.0, 609.0, 496.0, 295.0, 295.0, 820.0};
    public static final double[] pi =
            {916.0, 283.0, 146.0, 256.0, 216.0, 264.0, 793.0, 482.0, 170.0, 658.0, 901.0, 807.0, 152.0, 922.0, 176.0, 832.0, 770.0, 540.0, 228.0, 428.0, 737.0, 146.0, 342.0, 468.0, 348.0, 521.0, 635.0, 275.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 125.87, 135.26, 121.52, 162.44, 108.97, 115.76, 168.49, 112.52, 145.30, 193.41, 113.97, 186.25, 139.57, 96.90, 179.26, 192.35, 178.15, 140.68, 122.19, 82.89, 117.57, 120.80, 98.46, 171.28, 115.74, 132.53, 150.76},
            {125.87, 0.00, 174.02, 156.07, 175.36, 86.00, 144.26, 143.01, 121.98, 141.29, 143.33, 130.62, 102.53, 194.23, 137.72, 121.84, 194.18, 101.04, 194.80, 166.29, 148.19, 88.11, 179.56, 108.51, 172.85, 98.32, 107.57, 175.84},
            {135.26, 174.02, 0.00, 120.37, 123.00, 126.09, 126.81, 119.28, 113.60, 95.71, 185.80, 111.54, 184.06, 168.99, 108.70, 134.13, 125.84, 90.63, 97.06, 130.18, 161.70, 95.22, 104.10, 182.76, 123.04, 94.20, 196.83, 97.32},
            {121.52, 156.07, 120.37, 0.00, 87.10, 82.81, 171.59, 94.25, 116.38, 80.53, 168.57, 133.32, 142.17, 85.64, 111.81, 154.89, 146.99, 114.40, 136.64, 130.55, 188.11, 170.02, 195.06, 106.38, 184.84, 184.24, 112.44, 157.31},
            {162.44, 175.36, 123.00, 87.10, 0.00, 166.78, 116.06, 105.12, 149.30, 88.66, 117.72, 118.72, 148.47, 119.06, 106.97, 190.75, 142.35, 186.36, 97.88, 178.76, 128.35, 154.57, 158.95, 146.69, 177.74, 185.01, 167.68, 107.13},
            {108.97, 86.00, 126.09, 82.81, 166.78, 0.00, 81.30, 136.77, 175.03, 115.97, 103.26, 149.66, 141.15, 148.88, 175.41, 197.79, 135.39, 115.00, 151.53, 120.26, 168.89, 183.65, 154.81, 107.24, 87.58, 193.50, 186.78, 125.80},
            {115.76, 144.26, 126.81, 171.59, 116.06, 81.30, 0.00, 195.99, 161.63, 106.16, 108.98, 109.17, 170.66, 149.77, 104.97, 180.35, 147.99, 154.55, 110.45, 86.18, 99.44, 111.21, 112.52, 89.36, 182.48, 154.56, 138.43, 140.02},
            {168.49, 143.01, 119.28, 94.25, 105.12, 136.77, 195.99, 0.00, 120.71, 174.23, 140.54, 162.86, 190.98, 111.77, 85.62, 165.97, 198.91, 136.27, 113.92, 160.40, 95.69, 180.18, 162.24, 96.19, 140.90, 170.99, 169.14, 180.76},
            {112.52, 121.98, 113.60, 116.38, 149.30, 175.03, 161.63, 120.71, 0.00, 180.66, 191.17, 136.87, 130.25, 89.87, 100.54, 155.70, 151.68, 119.42, 139.24, 160.70, 86.08, 155.88, 138.76, 89.23, 157.79, 141.38, 80.24, 119.45},
            {145.30, 141.29, 95.71, 80.53, 88.66, 115.97, 106.16, 174.23, 180.66, 0.00, 174.36, 154.81, 135.69, 195.83, 84.69, 163.78, 87.34, 127.23, 129.27, 97.44, 143.97, 176.41, 87.21, 185.86, 100.40, 126.40, 138.69, 180.40},
            {193.41, 143.33, 185.80, 168.57, 117.72, 103.26, 108.98, 140.54, 191.17, 174.36, 0.00, 117.42, 110.69, 179.63, 111.95, 134.00, 187.82, 86.63, 140.63, 182.52, 169.80, 156.17, 80.27, 139.84, 135.63, 130.99, 145.17, 193.04},
            {113.97, 130.62, 111.54, 133.32, 118.72, 149.66, 109.17, 162.86, 136.87, 154.81, 117.42, 0.00, 176.71, 119.31, 124.12, 168.77, 150.78, 149.68, 137.93, 188.33, 83.93, 124.26, 182.16, 188.06, 197.54, 177.81, 115.14, 165.89},
            {186.25, 102.53, 184.06, 142.17, 148.47, 141.15, 170.66, 190.98, 130.25, 135.69, 110.69, 176.71, 0.00, 187.41, 117.33, 184.52, 139.24, 107.18, 149.25, 111.34, 128.48, 166.06, 176.26, 91.47, 132.16, 143.10, 165.24, 147.38},
            {139.57, 194.23, 168.99, 85.64, 119.06, 148.88, 149.77, 111.77, 89.87, 195.83, 179.63, 119.31, 187.41, 0.00, 196.39, 146.00, 130.47, 151.36, 100.58, 101.58, 143.25, 182.45, 125.23, 178.89, 189.17, 114.49, 194.82, 192.35},
            {96.90, 137.72, 108.70, 111.81, 106.97, 175.41, 104.97, 85.62, 100.54, 84.69, 111.95, 124.12, 117.33, 196.39, 0.00, 128.83, 141.57, 119.84, 193.35, 155.31, 129.77, 96.96, 133.29, 183.71, 120.49, 184.62, 108.92, 113.39},
            {179.26, 121.84, 134.13, 154.89, 190.75, 197.79, 180.35, 165.97, 155.70, 163.78, 134.00, 168.77, 184.52, 146.00, 128.83, 0.00, 80.72, 154.01, 123.38, 112.74, 179.55, 80.94, 191.55, 109.02, 147.67, 174.57, 188.14, 163.05},
            {192.35, 194.18, 125.84, 146.99, 142.35, 135.39, 147.99, 198.91, 151.68, 87.34, 187.82, 150.78, 139.24, 130.47, 141.57, 80.72, 0.00, 128.32, 191.87, 80.09, 88.20, 132.78, 164.42, 181.84, 138.06, 92.76, 145.01, 102.77},
            {178.15, 101.04, 90.63, 114.40, 186.36, 115.00, 154.55, 136.27, 119.42, 127.23, 86.63, 149.68, 107.18, 151.36, 119.84, 154.01, 128.32, 0.00, 194.43, 154.64, 106.46, 120.64, 159.53, 166.45, 113.47, 133.03, 111.37, 189.22},
            {140.68, 194.80, 97.06, 136.64, 97.88, 151.53, 110.45, 113.92, 139.24, 129.27, 140.63, 137.93, 149.25, 100.58, 193.35, 123.38, 191.87, 194.43, 0.00, 120.62, 190.86, 100.47, 117.79, 145.96, 143.81, 129.28, 163.76, 89.01},
            {122.19, 166.29, 130.18, 130.55, 178.76, 120.26, 86.18, 160.40, 160.70, 97.44, 182.52, 188.33, 111.34, 101.58, 155.31, 112.74, 80.09, 154.64, 120.62, 0.00, 166.70, 141.98, 154.91, 105.98, 169.68, 163.04, 180.40, 141.93},
            {82.89, 148.19, 161.70, 188.11, 128.35, 168.89, 99.44, 95.69, 86.08, 143.97, 169.80, 83.93, 128.48, 143.25, 129.77, 179.55, 88.20, 106.46, 190.86, 166.70, 0.00, 161.46, 136.97, 179.73, 190.96, 175.87, 179.72, 116.38},
            {117.57, 88.11, 95.22, 170.02, 154.57, 183.65, 111.21, 180.18, 155.88, 176.41, 156.17, 124.26, 166.06, 182.45, 96.96, 80.94, 132.78, 120.64, 100.47, 141.98, 161.46, 0.00, 190.15, 106.70, 173.66, 153.26, 111.57, 123.46},
            {120.80, 179.56, 104.10, 195.06, 158.95, 154.81, 112.52, 162.24, 138.76, 87.21, 80.27, 182.16, 176.26, 125.23, 133.29, 191.55, 164.42, 159.53, 117.79, 154.91, 136.97, 190.15, 0.00, 123.82, 157.21, 198.96, 183.37, 81.93},
            {98.46, 108.51, 182.76, 106.38, 146.69, 107.24, 89.36, 96.19, 89.23, 185.86, 139.84, 188.06, 91.47, 178.89, 183.71, 109.02, 181.84, 166.45, 145.96, 105.98, 179.73, 106.70, 123.82, 0.00, 143.60, 81.82, 190.03, 97.96},
            {171.28, 172.85, 123.04, 184.84, 177.74, 87.58, 182.48, 140.90, 157.79, 100.40, 135.63, 197.54, 132.16, 189.17, 120.49, 147.67, 138.06, 113.47, 143.81, 169.68, 190.96, 173.66, 157.21, 143.60, 0.00, 129.93, 169.35, 139.17},
            {115.74, 98.32, 94.20, 184.24, 185.01, 193.50, 154.56, 170.99, 141.38, 126.40, 130.99, 177.81, 143.10, 114.49, 184.62, 174.57, 92.76, 133.03, 129.28, 163.04, 175.87, 153.26, 198.96, 81.82, 129.93, 0.00, 95.41, 98.42},
            {132.53, 107.57, 196.83, 112.44, 167.68, 186.78, 138.43, 169.14, 80.24, 138.69, 145.17, 115.14, 165.24, 194.82, 108.92, 188.14, 145.01, 111.37, 163.76, 180.40, 179.72, 111.57, 183.37, 190.03, 169.35, 95.41, 0.00, 80.29},
            {150.76, 175.84, 97.32, 157.31, 107.13, 125.80, 140.02, 180.76, 119.45, 180.40, 193.04, 165.89, 147.38, 192.35, 113.39, 163.05, 102.77, 189.22, 89.01, 141.93, 116.38, 123.46, 81.93, 97.96, 139.17, 98.42, 80.29, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
