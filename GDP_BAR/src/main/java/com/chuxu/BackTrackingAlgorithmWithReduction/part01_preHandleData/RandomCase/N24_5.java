package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N24_5 {
    public static int dimension = 24;
    public static final double[] ci =
            {936.0, 212.0, 817.0, 571.0, 201.0, 202.0, 678.0, 548.0, 866.0, 717.0, 470.0, 111.0, 716.0, 276.0, 349.0, 991.0, 482.0, 716.0, 500.0, 806.0, 162.0, 204.0, 531.0, 315.0};
    public static final double[] pi =
            {235.0, 170.0, 114.0, 879.0, 941.0, 999.0, 249.0, 389.0, 953.0, 317.0, 381.0, 848.0, 537.0, 245.0, 867.0, 669.0, 254.0, 280.0, 266.0, 384.0, 153.0, 387.0, 188.0, 724.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 108.44, 175.67, 96.31, 176.93, 128.35, 184.03, 137.10, 142.85, 89.59, 91.49, 114.89, 92.75, 180.79, 109.68, 171.96, 168.39, 181.93, 192.23, 97.47, 112.54, 145.02, 140.85, 109.29},
            {108.44, 0.00, 81.29, 197.24, 90.34, 182.91, 134.37, 99.11, 117.01, 169.50, 192.37, 182.41, 174.59, 98.92, 105.64, 198.25, 124.21, 191.06, 99.73, 145.21, 172.13, 80.36, 85.30, 80.60},
            {175.67, 81.29, 0.00, 118.94, 193.35, 188.38, 165.04, 98.55, 108.12, 87.20, 111.30, 102.74, 147.00, 177.36, 82.59, 109.14, 90.29, 184.91, 194.03, 135.74, 148.83, 129.91, 152.93, 114.13},
            {96.31, 197.24, 118.94, 0.00, 157.37, 188.53, 189.08, 106.91, 187.81, 132.01, 116.04, 170.95, 153.29, 153.95, 127.39, 169.07, 158.92, 155.00, 169.08, 176.50, 193.78, 135.02, 119.63, 136.65},
            {176.93, 90.34, 193.35, 157.37, 0.00, 91.63, 87.42, 154.57, 172.36, 114.03, 139.13, 129.57, 134.11, 109.60, 191.89, 148.83, 85.97, 97.22, 196.60, 171.04, 133.05, 148.43, 112.23, 144.66},
            {128.35, 182.91, 188.38, 188.53, 91.63, 0.00, 160.62, 125.66, 124.46, 197.53, 125.92, 88.17, 106.41, 152.77, 117.39, 126.29, 154.94, 183.85, 194.37, 147.24, 170.77, 155.91, 161.84, 192.23},
            {184.03, 134.37, 165.04, 189.08, 87.42, 160.62, 0.00, 149.28, 88.92, 120.08, 94.54, 191.02, 100.12, 138.58, 172.16, 187.27, 138.93, 136.23, 186.45, 85.42, 137.16, 126.57, 109.11, 192.96},
            {137.10, 99.11, 98.55, 106.91, 154.57, 125.66, 149.28, 0.00, 100.20, 127.41, 165.46, 135.66, 162.52, 158.14, 160.52, 127.06, 80.78, 136.03, 127.06, 170.86, 123.02, 134.73, 101.28, 146.45},
            {142.85, 117.01, 108.12, 187.81, 172.36, 124.46, 88.92, 100.20, 0.00, 150.18, 143.11, 131.77, 140.24, 198.41, 82.35, 101.34, 161.32, 176.35, 121.59, 148.85, 199.86, 111.00, 199.60, 179.73},
            {89.59, 169.50, 87.20, 132.01, 114.03, 197.53, 120.08, 127.41, 150.18, 0.00, 170.38, 109.10, 189.91, 148.57, 148.91, 87.77, 181.38, 86.71, 144.62, 129.31, 123.99, 189.60, 120.99, 148.94},
            {91.49, 192.37, 111.30, 116.04, 139.13, 125.92, 94.54, 165.46, 143.11, 170.38, 0.00, 91.15, 195.68, 180.05, 113.06, 155.56, 138.38, 145.98, 187.38, 164.69, 176.64, 109.92, 169.82, 94.68},
            {114.89, 182.41, 102.74, 170.95, 129.57, 88.17, 191.02, 135.66, 131.77, 109.10, 91.15, 0.00, 127.16, 187.82, 93.02, 198.52, 172.90, 196.97, 84.10, 84.57, 127.28, 133.67, 166.51, 165.61},
            {92.75, 174.59, 147.00, 153.29, 134.11, 106.41, 100.12, 162.52, 140.24, 189.91, 195.68, 127.16, 0.00, 112.75, 115.98, 199.67, 86.71, 164.65, 80.07, 176.24, 131.76, 137.87, 187.29, 195.54},
            {180.79, 98.92, 177.36, 153.95, 109.60, 152.77, 138.58, 158.14, 198.41, 148.57, 180.05, 187.82, 112.75, 0.00, 144.02, 93.97, 91.42, 123.15, 95.19, 120.03, 91.62, 153.02, 140.31, 158.47},
            {109.68, 105.64, 82.59, 127.39, 191.89, 117.39, 172.16, 160.52, 82.35, 148.91, 113.06, 93.02, 115.98, 144.02, 0.00, 196.30, 167.31, 162.75, 108.05, 166.79, 182.96, 83.76, 111.88, 97.08},
            {171.96, 198.25, 109.14, 169.07, 148.83, 126.29, 187.27, 127.06, 101.34, 87.77, 155.56, 198.52, 199.67, 93.97, 196.30, 0.00, 80.64, 185.27, 96.50, 96.62, 192.52, 172.58, 109.38, 138.38},
            {168.39, 124.21, 90.29, 158.92, 85.97, 154.94, 138.93, 80.78, 161.32, 181.38, 138.38, 172.90, 86.71, 91.42, 167.31, 80.64, 0.00, 180.02, 165.39, 178.00, 152.70, 80.56, 170.70, 124.17},
            {181.93, 191.06, 184.91, 155.00, 97.22, 183.85, 136.23, 136.03, 176.35, 86.71, 145.98, 196.97, 164.65, 123.15, 162.75, 185.27, 180.02, 0.00, 189.70, 84.78, 140.69, 130.84, 99.34, 80.94},
            {192.23, 99.73, 194.03, 169.08, 196.60, 194.37, 186.45, 127.06, 121.59, 144.62, 187.38, 84.10, 80.07, 95.19, 108.05, 96.50, 165.39, 189.70, 0.00, 171.45, 196.51, 87.76, 193.14, 194.96},
            {97.47, 145.21, 135.74, 176.50, 171.04, 147.24, 85.42, 170.86, 148.85, 129.31, 164.69, 84.57, 176.24, 120.03, 166.79, 96.62, 178.00, 84.78, 171.45, 0.00, 163.52, 142.19, 162.99, 177.38},
            {112.54, 172.13, 148.83, 193.78, 133.05, 170.77, 137.16, 123.02, 199.86, 123.99, 176.64, 127.28, 131.76, 91.62, 182.96, 192.52, 152.70, 140.69, 196.51, 163.52, 0.00, 131.76, 154.10, 121.45},
            {145.02, 80.36, 129.91, 135.02, 148.43, 155.91, 126.57, 134.73, 111.00, 189.60, 109.92, 133.67, 137.87, 153.02, 83.76, 172.58, 80.56, 130.84, 87.76, 142.19, 131.76, 0.00, 80.86, 128.06},
            {140.85, 85.30, 152.93, 119.63, 112.23, 161.84, 109.11, 101.28, 199.60, 120.99, 169.82, 166.51, 187.29, 140.31, 111.88, 109.38, 170.70, 99.34, 193.14, 162.99, 154.10, 80.86, 0.00, 171.12},
            {109.29, 80.60, 114.13, 136.65, 144.66, 192.23, 192.96, 146.45, 179.73, 148.94, 94.68, 165.61, 195.54, 158.47, 97.08, 138.38, 124.17, 80.94, 194.96, 177.38, 121.45, 128.06, 171.12, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
