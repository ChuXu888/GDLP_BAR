package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N10_4 {
    public static int dimension = 10;
//    public static final double[] ci = {831.0, 651.0, 764.0, 679.0, 150.0, 106.0, 792.0, 133.0, 933.0, 695.0};  //这套数据可直接通过性质4得到最优解
//    public static final double[] pi = {652.0, 904.0, 348.0, 607.0, 354.0, 920.0, 290.0, 871.0, 134.0, 619.0};
    public static final double[] ci ={255.0,358.0,818.0,728.0,787.0,534.0,397.0,973.0,130.0,284.0};
    public static final double[] pi = {54.0,812.0,110.0,351.0,135.0,468.0,404.0,776.0,736.0,186.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
//            {0.00, 118.66, 199.83, 90.24, 122.75, 199.56, 85.72, 140.25, 145.80, 156.26},
//            {118.66, 0.00, 172.03, 163.28, 156.46, 96.91, 185.49, 166.37, 179.20, 168.87},
//            {199.83, 172.03, 0.00, 159.39, 81.37, 198.95, 113.72, 100.80, 193.63, 162.72},
//            {90.24, 163.28, 159.39, 0.00, 114.61, 194.28, 140.44, 115.51, 111.42, 117.76},
//            {122.75, 156.46, 81.37, 114.61, 0.00, 141.54, 180.54, 151.62, 130.96, 168.76},
//            {199.56, 96.91, 198.95, 194.28, 141.54, 0.00, 145.54, 111.24, 125.34, 199.74},
//            {85.72, 185.49, 113.72, 140.44, 180.54, 145.54, 0.00, 92.34, 180.26, 157.01},
//            {140.25, 166.37, 100.80, 115.51, 151.62, 111.24, 92.34, 0.00, 173.19, 86.09},
//            {145.80, 179.20, 193.63, 111.42, 130.96, 125.34, 180.26, 173.19, 0.00, 180.92},
//            {156.26, 168.87, 162.72, 117.76, 168.76, 199.74, 157.01, 86.09, 180.92, 0.00},
            {   0.00, 146.93,  80.77, 154.54, 154.60, 155.64, 118.02, 144.19, 144.55, 157.20},
            { 146.93,   0.00, 126.64, 189.26,  94.93, 141.88, 146.87, 116.82, 123.82, 142.39},
            {  80.77, 126.64,   0.00, 115.14,  97.73, 190.87, 196.98,  94.24, 160.68, 141.60},
            { 154.54, 189.26, 115.14,   0.00, 116.32, 106.49, 193.46, 110.94,  85.45, 119.88},
            { 154.60,  94.93,  97.73, 116.32,   0.00,  94.91, 162.60,  89.65, 121.17, 179.58},
            { 155.64, 141.88, 190.87, 106.49,  94.91,   0.00, 141.66, 103.44, 137.89, 190.14},
            { 118.02, 146.87, 196.98, 193.46, 162.60, 141.66,   0.00, 182.74, 126.41, 182.88},
            { 144.19, 116.82,  94.24, 110.94,  89.65, 103.44, 182.74,   0.00,  98.61, 104.68},
            { 144.55, 123.82, 160.68,  85.45, 121.17, 137.89, 126.41,  98.61,   0.00, 168.07},
            { 157.20, 142.39, 141.60, 119.88, 179.58, 190.14, 182.88, 104.68, 168.07,   0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
