package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N24_2 {
    public static int dimension = 24;
    public static final double[] ci =
            {766.0, 591.0, 478.0, 978.0, 288.0, 259.0, 302.0, 474.0, 466.0, 207.0, 403.0, 118.0, 401.0, 780.0, 533.0, 797.0, 459.0, 656.0, 469.0, 126.0, 229.0, 610.0, 650.0, 222.0};
    public static final double[] pi =
            {385.0, 658.0, 505.0, 518.0, 674.0, 845.0, 968.0, 511.0, 347.0, 819.0, 423.0, 834.0, 274.0, 852.0, 980.0, 354.0, 873.0, 751.0, 169.0, 797.0, 786.0, 611.0, 440.0, 532.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 138.20, 103.07, 185.40, 184.77, 92.98, 165.76, 185.26, 143.50, 82.40, 146.15, 154.18, 109.82, 90.69, 136.33, 160.52, 114.40, 159.59, 157.22, 178.50, 188.91, 154.70, 117.16, 130.02},
            {138.20, 0.00, 176.25, 99.02, 113.79, 85.37, 105.21, 150.16, 97.71, 168.49, 132.08, 169.57, 135.47, 106.36, 148.00, 97.98, 112.49, 169.60, 130.18, 170.69, 183.21, 192.99, 179.20, 139.58},
            {103.07, 176.25, 0.00, 165.91, 159.42, 171.66, 195.73, 114.30, 119.99, 188.30, 127.30, 115.49, 125.13, 153.05, 81.76, 85.83, 118.57, 156.41, 89.79, 121.47, 195.59, 99.34, 130.27, 129.78},
            {185.40, 99.02, 165.91, 0.00, 131.09, 99.72, 91.45, 140.54, 120.65, 153.03, 192.77, 152.58, 129.01, 112.98, 195.35, 92.00, 145.66, 154.55, 125.73, 82.19, 125.84, 143.32, 188.67, 193.98},
            {184.77, 113.79, 159.42, 131.09, 0.00, 128.25, 119.68, 88.86, 155.61, 106.74, 95.00, 199.95, 158.01, 133.73, 189.25, 151.15, 169.83, 126.56, 175.51, 127.39, 159.60, 136.13, 96.73, 138.69},
            {92.98, 85.37, 171.66, 99.72, 128.25, 0.00, 149.19, 137.97, 103.51, 147.34, 173.07, 81.43, 149.12, 88.72, 112.08, 101.43, 148.99, 162.32, 168.39, 159.68, 106.58, 143.85, 129.95, 118.80},
            {165.76, 105.21, 195.73, 91.45, 119.68, 149.19, 0.00, 166.30, 157.68, 98.14, 82.94, 176.36, 190.94, 101.68, 122.12, 130.34, 106.13, 192.48, 155.44, 86.43, 178.69, 136.18, 119.44, 196.44},
            {185.26, 150.16, 114.30, 140.54, 88.86, 137.97, 166.30, 0.00, 129.43, 190.13, 113.00, 154.26, 158.19, 186.21, 109.40, 134.45, 96.44, 123.32, 138.15, 136.28, 80.67, 126.48, 126.21, 177.44},
            {143.50, 97.71, 119.99, 120.65, 155.61, 103.51, 157.68, 129.43, 0.00, 146.64, 144.68, 87.88, 193.47, 136.75, 178.81, 186.77, 195.53, 178.48, 154.03, 80.65, 178.50, 171.15, 177.55, 181.70},
            {82.40, 168.49, 188.30, 153.03, 106.74, 147.34, 98.14, 190.13, 146.64, 0.00, 135.24, 91.74, 133.12, 99.31, 199.97, 97.41, 158.05, 141.95, 134.94, 83.03, 86.06, 136.84, 169.18, 146.62},
            {146.15, 132.08, 127.30, 192.77, 95.00, 173.07, 82.94, 113.00, 144.68, 135.24, 0.00, 101.23, 142.75, 196.82, 83.80, 193.75, 161.39, 144.82, 174.40, 177.17, 96.49, 165.73, 99.94, 139.96},
            {154.18, 169.57, 115.49, 152.58, 199.95, 81.43, 176.36, 154.26, 87.88, 91.74, 101.23, 0.00, 167.56, 81.24, 160.48, 100.76, 196.50, 195.63, 122.27, 197.22, 130.47, 135.56, 104.90, 82.35},
            {109.82, 135.47, 125.13, 129.01, 158.01, 149.12, 190.94, 158.19, 193.47, 133.12, 142.75, 167.56, 0.00, 163.17, 113.81, 107.11, 90.45, 189.45, 199.21, 195.23, 126.26, 154.35, 83.63, 196.15},
            {90.69, 106.36, 153.05, 112.98, 133.73, 88.72, 101.68, 186.21, 136.75, 99.31, 196.82, 81.24, 163.17, 0.00, 86.22, 98.01, 109.36, 108.94, 100.35, 111.55, 195.96, 174.87, 145.70, 126.79},
            {136.33, 148.00, 81.76, 195.35, 189.25, 112.08, 122.12, 109.40, 178.81, 199.97, 83.80, 160.48, 113.81, 86.22, 0.00, 105.69, 185.12, 149.38, 103.90, 130.13, 198.66, 89.30, 116.35, 167.91},
            {160.52, 97.98, 85.83, 92.00, 151.15, 101.43, 130.34, 134.45, 186.77, 97.41, 193.75, 100.76, 107.11, 98.01, 105.69, 0.00, 149.83, 95.28, 181.33, 174.48, 165.91, 150.77, 126.28, 139.65},
            {114.40, 112.49, 118.57, 145.66, 169.83, 148.99, 106.13, 96.44, 195.53, 158.05, 161.39, 196.50, 90.45, 109.36, 185.12, 149.83, 0.00, 109.29, 97.26, 198.88, 127.32, 187.35, 129.02, 157.56},
            {159.59, 169.60, 156.41, 154.55, 126.56, 162.32, 192.48, 123.32, 178.48, 141.95, 144.82, 195.63, 189.45, 108.94, 149.38, 95.28, 109.29, 0.00, 173.98, 155.03, 194.66, 103.79, 188.56, 190.65},
            {157.22, 130.18, 89.79, 125.73, 175.51, 168.39, 155.44, 138.15, 154.03, 134.94, 174.40, 122.27, 199.21, 100.35, 103.90, 181.33, 97.26, 173.98, 0.00, 175.33, 174.82, 106.30, 115.39, 105.65},
            {178.50, 170.69, 121.47, 82.19, 127.39, 159.68, 86.43, 136.28, 80.65, 83.03, 177.17, 197.22, 195.23, 111.55, 130.13, 174.48, 198.88, 155.03, 175.33, 0.00, 127.04, 182.52, 89.75, 164.21},
            {188.91, 183.21, 195.59, 125.84, 159.60, 106.58, 178.69, 80.67, 178.50, 86.06, 96.49, 130.47, 126.26, 195.96, 198.66, 165.91, 127.32, 194.66, 174.82, 127.04, 0.00, 125.13, 109.74, 177.46},
            {154.70, 192.99, 99.34, 143.32, 136.13, 143.85, 136.18, 126.48, 171.15, 136.84, 165.73, 135.56, 154.35, 174.87, 89.30, 150.77, 187.35, 103.79, 106.30, 182.52, 125.13, 0.00, 84.60, 111.16},
            {117.16, 179.20, 130.27, 188.67, 96.73, 129.95, 119.44, 126.21, 177.55, 169.18, 99.94, 104.90, 83.63, 145.70, 116.35, 126.28, 129.02, 188.56, 115.39, 89.75, 109.74, 84.60, 0.00, 82.44},
            {130.02, 139.58, 129.78, 193.98, 138.69, 118.80, 196.44, 177.44, 181.70, 146.62, 139.96, 82.35, 196.15, 126.79, 167.91, 139.65, 157.56, 190.65, 105.65, 164.21, 177.46, 111.16, 82.44, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
