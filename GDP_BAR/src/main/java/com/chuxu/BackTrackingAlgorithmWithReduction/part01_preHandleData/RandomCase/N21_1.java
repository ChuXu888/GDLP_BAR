package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N21_1 {
    public static int dimension = 21;
    public static final double[] ci =
            {978.0, 990.0, 296.0, 548.0, 251.0, 200.0, 931.0, 407.0, 432.0, 233.0, 571.0, 329.0, 664.0, 512.0, 811.0, 260.0, 978.0, 430.0, 980.0, 876.0, 305.0};
    public static final double[] pi =
            {330.0, 625.0, 868.0, 675.0, 549.0, 958.0, 669.0, 410.0, 187.0, 729.0, 817.0, 494.0, 976.0, 628.0, 288.0, 666.0, 808.0, 759.0, 888.0, 258.0, 500.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 192.63, 103.96, 117.26, 132.70, 193.23, 109.99, 111.99, 174.32, 171.36, 156.97, 151.08, 175.35, 102.86, 140.50, 120.52, 115.06, 163.08, 83.79, 188.52, 118.36},
            {192.63, 0.00, 112.70, 128.21, 122.19, 131.22, 148.84, 134.02, 98.13, 125.91, 152.68, 168.52, 181.68, 93.94, 190.14, 156.42, 106.38, 88.81, 100.99, 87.87, 196.31},
            {103.96, 112.70, 0.00, 88.82, 84.25, 144.71, 158.01, 101.47, 194.30, 113.93, 147.27, 86.80, 82.11, 109.60, 147.93, 176.03, 109.96, 80.76, 125.60, 104.76, 175.46},
            {117.26, 128.21, 88.82, 0.00, 162.31, 158.65, 86.66, 122.28, 109.65, 122.19, 84.21, 169.98, 165.23, 107.60, 146.91, 84.21, 95.89, 80.99, 185.64, 151.12, 135.07},
            {132.70, 122.19, 84.25, 162.31, 0.00, 158.51, 153.21, 176.45, 162.18, 144.59, 186.83, 139.35, 94.03, 161.11, 117.36, 195.57, 188.94, 91.56, 182.86, 161.55, 134.37},
            {193.23, 131.22, 144.71, 158.65, 158.51, 0.00, 133.28, 81.12, 182.86, 162.03, 114.55, 135.87, 195.28, 172.02, 109.98, 175.69, 185.66, 108.54, 198.55, 172.63, 192.59},
            {109.99, 148.84, 158.01, 86.66, 153.21, 133.28, 0.00, 94.48, 113.10, 199.21, 92.85, 100.76, 188.36, 197.70, 180.17, 198.65, 186.45, 175.17, 156.31, 119.21, 144.73},
            {111.99, 134.02, 101.47, 122.28, 176.45, 81.12, 94.48, 0.00, 180.28, 102.45, 164.03, 110.21, 144.74, 199.91, 194.82, 138.09, 102.75, 184.54, 116.65, 118.87, 115.88},
            {174.32, 98.13, 194.30, 109.65, 162.18, 182.86, 113.10, 180.28, 0.00, 107.97, 81.02, 99.34, 148.70, 101.49, 169.31, 137.11, 162.38, 134.64, 136.06, 136.78, 178.61},
            {171.36, 125.91, 113.93, 122.19, 144.59, 162.03, 199.21, 102.45, 107.97, 0.00, 190.84, 133.63, 117.60, 95.66, 86.17, 86.00, 198.43, 91.05, 174.99, 169.16, 135.16},
            {156.97, 152.68, 147.27, 84.21, 186.83, 114.55, 92.85, 164.03, 81.02, 190.84, 0.00, 82.30, 177.62, 169.02, 149.01, 177.32, 130.19, 165.38, 121.32, 130.40, 155.83},
            {151.08, 168.52, 86.80, 169.98, 139.35, 135.87, 100.76, 110.21, 99.34, 133.63, 82.30, 0.00, 191.24, 160.71, 127.67, 188.90, 121.65, 113.64, 117.53, 150.29, 94.86},
            {175.35, 181.68, 82.11, 165.23, 94.03, 195.28, 188.36, 144.74, 148.70, 117.60, 177.62, 191.24, 0.00, 147.01, 176.88, 172.11, 100.92, 123.87, 143.47, 143.66, 148.71},
            {102.86, 93.94, 109.60, 107.60, 161.11, 172.02, 197.70, 199.91, 101.49, 95.66, 169.02, 160.71, 147.01, 0.00, 118.84, 107.25, 138.52, 162.46, 199.33, 180.52, 143.72},
            {140.50, 190.14, 147.93, 146.91, 117.36, 109.98, 180.17, 194.82, 169.31, 86.17, 149.01, 127.67, 176.88, 118.84, 0.00, 102.06, 132.13, 137.04, 107.17, 109.18, 81.53},
            {120.52, 156.42, 176.03, 84.21, 195.57, 175.69, 198.65, 138.09, 137.11, 86.00, 177.32, 188.90, 172.11, 107.25, 102.06, 0.00, 184.43, 168.38, 151.82, 86.19, 192.15},
            {115.06, 106.38, 109.96, 95.89, 188.94, 185.66, 186.45, 102.75, 162.38, 198.43, 130.19, 121.65, 100.92, 138.52, 132.13, 184.43, 0.00, 120.21, 114.98, 176.48, 178.95},
            {163.08, 88.81, 80.76, 80.99, 91.56, 108.54, 175.17, 184.54, 134.64, 91.05, 165.38, 113.64, 123.87, 162.46, 137.04, 168.38, 120.21, 0.00, 145.47, 123.83, 141.90},
            {83.79, 100.99, 125.60, 185.64, 182.86, 198.55, 156.31, 116.65, 136.06, 174.99, 121.32, 117.53, 143.47, 199.33, 107.17, 151.82, 114.98, 145.47, 0.00, 89.23, 162.71},
            {188.52, 87.87, 104.76, 151.12, 161.55, 172.63, 119.21, 118.87, 136.78, 169.16, 130.40, 150.29, 143.66, 180.52, 109.18, 86.19, 176.48, 123.83, 89.23, 0.00, 87.54},
            {118.36, 196.31, 175.46, 135.07, 134.37, 192.59, 144.73, 115.88, 178.61, 135.16, 155.83, 94.86, 148.71, 143.72, 81.53, 192.15, 178.95, 141.90, 162.71, 87.54, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
