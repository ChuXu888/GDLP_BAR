package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N24_3 {
    public static int dimension = 24;
    public static final double[] ci =
            {143.0, 212.0, 701.0, 394.0, 612.0, 291.0, 746.0, 110.0, 402.0, 452.0, 515.0, 716.0, 283.0, 446.0, 773.0, 263.0, 321.0, 652.0, 462.0, 102.0, 514.0, 353.0, 346.0, 829.0};
    public static final double[] pi =
            {281.0, 184.0, 883.0, 599.0, 337.0, 651.0, 412.0, 900.0, 603.0, 365.0, 927.0, 929.0, 763.0, 501.0, 319.0, 915.0, 779.0, 928.0, 222.0, 756.0, 206.0, 155.0, 907.0, 136.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
            {0.00, 166.42, 196.13, 105.67, 142.45, 145.70, 98.61, 107.58, 104.21, 173.14, 154.18, 143.24, 167.68, 195.67, 180.54, 101.86, 120.51, 178.45, 197.67, 190.74, 147.52, 185.05, 188.50, 128.37},
            {166.42, 0.00, 169.16, 124.70, 111.54, 174.81, 123.60, 130.87, 144.11, 101.48, 180.90, 199.11, 100.64, 97.67, 150.81, 149.82, 140.39, 181.08, 82.40, 152.97, 132.62, 122.57, 134.02, 116.71},
            {196.13, 169.16, 0.00, 144.21, 172.53, 176.49, 161.01, 136.27, 106.83, 120.09, 129.93, 140.58, 135.06, 147.89, 82.24, 95.69, 191.65, 93.07, 100.82, 154.39, 102.85, 197.39, 134.37, 190.85},
            {105.67, 124.70, 144.21, 0.00, 127.99, 150.57, 173.44, 194.89, 93.01, 157.36, 143.24, 84.98, 87.68, 169.20, 111.66, 198.53, 164.59, 151.69, 199.16, 89.18, 98.97, 137.18, 140.15, 195.60},
            {142.45, 111.54, 172.53, 127.99, 0.00, 82.95, 153.02, 181.79, 124.92, 195.76, 82.00, 116.07, 116.08, 93.75, 140.25, 85.27, 114.64, 159.75, 111.04, 178.10, 120.18, 140.52, 189.41, 105.44},
            {145.70, 174.81, 176.49, 150.57, 82.95, 0.00, 181.15, 164.71, 153.31, 169.70, 89.17, 170.37, 100.64, 80.65, 146.11, 182.04, 100.06, 83.04, 181.69, 121.81, 114.51, 188.10, 128.24, 116.96},
            {98.61, 123.60, 161.01, 173.44, 153.02, 181.15, 0.00, 112.43, 80.58, 191.37, 139.00, 100.38, 147.34, 111.53, 154.37, 173.90, 120.89, 150.89, 146.68, 150.05, 92.58, 104.12, 103.81, 155.68},
            {107.58, 130.87, 136.27, 194.89, 181.79, 164.71, 112.43, 0.00, 85.46, 98.19, 109.82, 139.36, 185.61, 138.17, 162.56, 133.00, 133.18, 190.14, 172.51, 171.04, 151.12, 111.25, 146.19, 120.07},
            {104.21, 144.11, 106.83, 93.01, 124.92, 153.31, 80.58, 85.46, 0.00, 199.29, 99.26, 140.03, 121.46, 185.90, 99.71, 145.77, 101.98, 105.43, 138.91, 198.44, 144.54, 163.94, 124.49, 80.89},
            {173.14, 101.48, 120.09, 157.36, 195.76, 169.70, 191.37, 98.19, 199.29, 0.00, 191.25, 97.57, 112.31, 115.92, 175.47, 88.88, 179.88, 87.88, 167.14, 98.51, 191.11, 80.05, 107.62, 95.71},
            {154.18, 180.90, 129.93, 143.24, 82.00, 89.17, 139.00, 109.82, 99.26, 191.25, 0.00, 165.66, 112.23, 85.66, 191.68, 118.75, 115.24, 185.12, 133.36, 113.02, 104.52, 198.21, 82.96, 144.11},
            {143.24, 199.11, 140.58, 84.98, 116.07, 170.37, 100.38, 139.36, 140.03, 97.57, 165.66, 0.00, 94.56, 104.55, 89.95, 164.93, 89.24, 126.89, 117.23, 161.11, 110.13, 148.38, 192.27, 161.17},
            {167.68, 100.64, 135.06, 87.68, 116.08, 100.64, 147.34, 185.61, 121.46, 112.31, 112.23, 94.56, 0.00, 125.37, 154.36, 96.33, 159.43, 156.43, 143.23, 101.50, 148.75, 88.30, 196.30, 95.31},
            {195.67, 97.67, 147.89, 169.20, 93.75, 80.65, 111.53, 138.17, 185.90, 115.92, 85.66, 104.55, 125.37, 0.00, 82.08, 150.49, 106.01, 196.53, 167.97, 192.07, 94.39, 183.40, 95.17, 143.51},
            {180.54, 150.81, 82.24, 111.66, 140.25, 146.11, 154.37, 162.56, 99.71, 175.47, 191.68, 89.95, 154.36, 82.08, 0.00, 110.78, 166.89, 94.70, 81.23, 97.81, 186.76, 145.33, 127.81, 179.30},
            {101.86, 149.82, 95.69, 198.53, 85.27, 182.04, 173.90, 133.00, 145.77, 88.88, 118.75, 164.93, 96.33, 150.49, 110.78, 0.00, 146.91, 109.33, 111.56, 191.15, 179.42, 110.26, 193.58, 188.42},
            {120.51, 140.39, 191.65, 164.59, 114.64, 100.06, 120.89, 133.18, 101.98, 179.88, 115.24, 89.24, 159.43, 106.01, 166.89, 146.91, 0.00, 172.69, 112.88, 188.84, 196.90, 139.38, 198.01, 139.49},
            {178.45, 181.08, 93.07, 151.69, 159.75, 83.04, 150.89, 190.14, 105.43, 87.88, 185.12, 126.89, 156.43, 196.53, 94.70, 109.33, 172.69, 0.00, 176.98, 133.90, 160.68, 84.86, 90.16, 116.37},
            {197.67, 82.40, 100.82, 199.16, 111.04, 181.69, 146.68, 172.51, 138.91, 167.14, 133.36, 117.23, 143.23, 167.97, 81.23, 111.56, 112.88, 176.98, 0.00, 80.23, 191.43, 145.53, 141.81, 174.15},
            {190.74, 152.97, 154.39, 89.18, 178.10, 121.81, 150.05, 171.04, 198.44, 98.51, 113.02, 161.11, 101.50, 192.07, 97.81, 191.15, 188.84, 133.90, 80.23, 0.00, 139.99, 113.91, 128.15, 195.04},
            {147.52, 132.62, 102.85, 98.97, 120.18, 114.51, 92.58, 151.12, 144.54, 191.11, 104.52, 110.13, 148.75, 94.39, 186.76, 179.42, 196.90, 160.68, 191.43, 139.99, 0.00, 193.64, 151.46, 185.50},
            {185.05, 122.57, 197.39, 137.18, 140.52, 188.10, 104.12, 111.25, 163.94, 80.05, 198.21, 148.38, 88.30, 183.40, 145.33, 110.26, 139.38, 84.86, 145.53, 113.91, 193.64, 0.00, 101.07, 91.37},
            {188.50, 134.02, 134.37, 140.15, 189.41, 128.24, 103.81, 146.19, 124.49, 107.62, 82.96, 192.27, 196.30, 95.17, 127.81, 193.58, 198.01, 90.16, 141.81, 128.15, 151.46, 101.07, 0.00, 192.48},
            {128.37, 116.71, 190.85, 195.60, 105.44, 116.96, 155.68, 120.07, 80.89, 95.71, 144.11, 161.17, 95.31, 143.51, 179.30, 188.42, 139.49, 116.37, 174.15, 195.04, 185.50, 91.37, 192.48, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
