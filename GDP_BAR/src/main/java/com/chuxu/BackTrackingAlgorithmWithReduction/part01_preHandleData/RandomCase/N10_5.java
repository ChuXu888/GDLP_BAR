package com.chuxu.BackTrackingAlgorithmWithReduction.part01_preHandleData.RandomCase;

import com.chuxu.entity.Facility;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class N10_5 {
    public static int dimension = 10;
//    public static final double[] ci = {130.0, 100.0, 127.0, 796.0, 571.0, 290.0, 554.0, 644.0, 207.0, 390.0};  //这一套回溯搜索前发生了降阶
//    public static final double[] pi = {142.0, 178.0, 448.0, 173.0, 777.0, 406.0, 488.0, 403.0, 390.0, 100.0};
    public static final double[] ci = {550.0, 907.0, 126.0, 757.0, 375.0, 619.0, 966.0, 487.0, 496.0, 342.0};
    public static final double[] pi = {648.0, 805.0, 921.0, 782.0, 857.0, 270.0, 946.0, 141.0, 433.0, 482.0};
    public static final LinkedHashSet<Facility> V = new LinkedHashSet<>();
    public static double[][] disMatrix = {
//            {0.00, 153.54, 191.20, 123.69, 86.87, 101.67, 86.89, 103.52, 150.92, 101.60},
//            {153.54, 0.00, 109.26, 81.15, 95.84, 110.46, 158.87, 147.43, 129.20, 140.06},
//            {191.20, 109.26, 0.00, 144.23, 113.05, 165.55, 103.14, 144.98, 89.33, 196.36},
//            {123.69, 81.15, 144.23, 0.00, 110.36, 115.05, 102.00, 148.42, 184.63, 137.85},
//            {86.87, 95.84, 113.05, 110.36, 0.00, 131.23, 84.41, 145.81, 99.51, 159.65},
//            {101.67, 110.46, 165.55, 115.05, 131.23, 0.00, 130.25, 199.86, 124.63, 132.95},
//            {86.89, 158.87, 103.14, 102.00, 84.41, 130.25, 0.00, 88.93, 180.87, 140.07},
//            {103.52, 147.43, 144.98, 148.42, 145.81, 199.86, 88.93, 0.00, 153.94, 118.67},
//            {150.92, 129.20, 89.33, 184.63, 99.51, 124.63, 180.87, 153.94, 0.00, 162.87},
//            {101.60, 140.06, 196.36, 137.85, 159.65, 132.95, 140.07, 118.67, 162.87, 0.00},
            {0.00, 121.41, 105.74, 157.11, 119.02, 92.45, 157.65, 142.33, 176.14, 131.79},
            {121.41, 0.00, 144.43, 135.12, 162.98, 122.80, 153.49, 84.50, 122.70, 185.26},
            {105.74, 144.43, 0.00, 167.85, 188.84, 176.49, 115.14, 195.07, 138.65, 143.43},
            {157.11, 135.12, 167.85, 0.00, 102.70, 183.94, 105.03, 101.97, 138.67, 149.96},
            {119.02, 162.98, 188.84, 102.70, 0.00, 186.59, 82.33, 117.80, 97.57, 109.12},
            {92.45, 122.80, 176.49, 183.94, 186.59, 0.00, 162.07, 82.28, 117.30, 147.15},
            {157.65, 153.49, 115.14, 105.03, 82.33, 162.07, 0.00, 165.14, 154.56, 90.48},
            {142.33, 84.50, 195.07, 101.97, 117.80, 82.28, 165.14, 0.00, 145.65, 175.01},
            {176.14, 122.70, 138.65, 138.67, 97.57, 117.30, 154.56, 145.65, 0.00, 89.81},
            {131.79, 185.26, 143.43, 149.96, 109.12, 147.15, 90.48, 175.01, 89.81, 0.00},
    };
    public static final double φp = 0.3;  //本例中都取0.2是会得到性质7疯狂降阶的情况，然后通过性质4直接得到了最优解
    public static final double φc = 0.3;
    public static double P;
    public static double C;

    public static void main(String[] args) {
        preHandle();
    }

    public static void preHandle() {
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
        P = Arrays.stream(pi).reduce(0.0, Double::sum) * φp;
        C = Arrays.stream(ci).reduce(0.0, Double::sum) * φc;
        P = Double.parseDouble(decimalFormat.format(P));
        C = Double.parseDouble(decimalFormat.format(C));
        System.out.println("P = " + P);
        System.out.println("C = " + C);
        for (int i = 0; i < pi.length; i++) {
            V.add(new Facility(i + 1, ci[i], pi[i], pi[i] / ci[i]));
        }
    }
}
